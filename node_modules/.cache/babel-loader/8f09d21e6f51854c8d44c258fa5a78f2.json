{"ast":null,"code":"import * as actionTypes from '../types/types';\nimport { apiBaseUrl } from '../helpers/common';\nimport { handleResponse } from '../helpers/userServices';\nimport toastr from \"reactjs-toastr\";\nexport const fetchStart = () => {\n  return {\n    type: actionTypes.FETCH_DATA_BEGIN\n  };\n};\nexport const fetchTournamentsSuccess = data => {\n  return {\n    type: actionTypes.FETCH_TOURNAMENTS_SUCCESS,\n    payload: data.data\n  };\n};\nexport const fetchfilterTournamentsSuccess = data => {\n  return {\n    type: actionTypes.FETCH_FILTER_TOURNAMENTS_SUCCESS,\n    payload: data.data\n  };\n};\nexport const fetchAllTournamentsMatches = data => {\n  return {\n    type: actionTypes.FETCH_ALL_TOURNAMENTS_MATCHES,\n    payload: data.matchdata,\n    payloadd: data.tourdata\n  };\n};\nexport const fetchsingleTournamentSuccess = data => {\n  return {\n    type: actionTypes.FETCH_SINGLE_TOURNAMENT_SUCCESS,\n    payload: data.data\n  };\n};\nexport function getTournaments() {\n  return dispatch => {\n    dispatch(fetchStart());\n    const request = new Request(`${apiBaseUrl}/get-tournaments`, {\n      method: 'GET',\n      headers: new Headers({\n        'Content-Type': 'application/json'\n      })\n    });\n    return fetch(request).then(handleResponse).then(data => {\n      dispatch(fetchTournamentsSuccess(data));\n    });\n  };\n}\nexport function getSpecificTours(id) {\n  return dispatch => {\n    dispatch(fetchStart());\n    const request = new Request(`${apiBaseUrl}/get-filtered-tournaments/${id}`, {\n      method: 'GET',\n      headers: new Headers({\n        'Content-Type': 'application/json'\n      })\n    });\n    return fetch(request).then(handleResponse).then(data => {\n      dispatch(fetchfilterTournamentsSuccess(data));\n    });\n  };\n}\nexport function getAllTourMatchs(id = 0, idd = 0) {\n  return dispatch => {\n    dispatch(fetchStart());\n    const request = new Request(`${apiBaseUrl}/get-tournaments-matches/${id}/${idd}`, {\n      method: 'GET',\n      headers: new Headers({\n        'Content-Type': 'application/json'\n      })\n    });\n    return fetch(request).then(handleResponse).then(data => {\n      dispatch(fetchAllTournamentsMatches(data));\n    });\n  };\n}\nexport function getSingleTour(id) {\n  return dispatch => {\n    dispatch(fetchStart());\n    const request = new Request(`${apiBaseUrl}/get-single-tournament/${id}`, {\n      method: 'GET',\n      headers: new Headers({\n        'Content-Type': 'application/json'\n      })\n    });\n    return fetch(request).then(handleResponse).then(data => {\n      dispatch(fetchsingleTournamentSuccess(data));\n    });\n  };\n}","map":{"version":3,"sources":["/home/capslock/Downloads/envy/src/store/actions/tournamentsActions.js"],"names":["actionTypes","apiBaseUrl","handleResponse","toastr","fetchStart","type","FETCH_DATA_BEGIN","fetchTournamentsSuccess","data","FETCH_TOURNAMENTS_SUCCESS","payload","fetchfilterTournamentsSuccess","FETCH_FILTER_TOURNAMENTS_SUCCESS","fetchAllTournamentsMatches","FETCH_ALL_TOURNAMENTS_MATCHES","matchdata","payloadd","tourdata","fetchsingleTournamentSuccess","FETCH_SINGLE_TOURNAMENT_SUCCESS","getTournaments","dispatch","request","Request","method","headers","Headers","fetch","then","getSpecificTours","id","getAllTourMatchs","idd","getSingleTour"],"mappings":"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","sourcesContent":["import * as actionTypes from '../types/types';\r\nimport {apiBaseUrl} from '../helpers/common';\r\nimport {handleResponse} from '../helpers/userServices';\r\nimport toastr from \"reactjs-toastr\";\r\n\r\nexport const fetchStart = () => {\r\n    return {\r\n        type: actionTypes.FETCH_DATA_BEGIN\r\n    }\r\n}\r\n\r\nexport const fetchTournamentsSuccess = (data) => {\r\n   \r\n    return {\r\n        type: actionTypes.FETCH_TOURNAMENTS_SUCCESS,\r\n        payload: data.data\r\n    }\r\n}\r\nexport const fetchfilterTournamentsSuccess = (data) => {\r\n   \r\n    return {\r\n        type: actionTypes.FETCH_FILTER_TOURNAMENTS_SUCCESS,\r\n        payload: data.data\r\n    }\r\n}\r\nexport const fetchAllTournamentsMatches = (data) => {\r\n   \r\n    return {\r\n        type: actionTypes.FETCH_ALL_TOURNAMENTS_MATCHES,\r\n        payload: data.matchdata,\r\n        payloadd :data.tourdata\r\n    }\r\n}\r\nexport const fetchsingleTournamentSuccess = (data) => {\r\n   \r\n    return {\r\n        type: actionTypes.FETCH_SINGLE_TOURNAMENT_SUCCESS,\r\n        payload: data.data,\r\n    }\r\n}\r\n\r\nexport function getTournaments() {\r\n    return dispatch => {\r\n        dispatch(fetchStart());\r\n        const request = new Request(`${apiBaseUrl}/get-tournaments`, {\r\n            method: 'GET',\r\n            headers: new Headers({ 'Content-Type': 'application/json' }),\r\n        });\r\n\r\n        return fetch(request).then(handleResponse).then((data) => {\r\n                dispatch(fetchTournamentsSuccess(data));\r\n        });\r\n    }\r\n}\r\nexport function getSpecificTours(id) {\r\nreturn dispatch => {\r\n    dispatch(fetchStart());\r\n    const request = new Request(`${apiBaseUrl}/get-filtered-tournaments/${id}`, {\r\n        method: 'GET',\r\n        headers: new Headers({ 'Content-Type': 'application/json' }),\r\n    });\r\n    return fetch(request).then(handleResponse).then((data) => {\r\n        dispatch(fetchfilterTournamentsSuccess(data))\r\n    });\r\n}\r\n}\r\nexport function getAllTourMatchs(id=0,idd=0) {\r\n    return dispatch => {\r\n        dispatch(fetchStart());\r\n        const request = new Request(`${apiBaseUrl}/get-tournaments-matches/${id}/${idd}`, {\r\n            method: 'GET',\r\n            headers: new Headers({ 'Content-Type': 'application/json' }),\r\n        });\r\n        return fetch(request).then(handleResponse).then((data) => {\r\n            dispatch(fetchAllTournamentsMatches(data))\r\n        });\r\n    }\r\n    }\r\n    export function getSingleTour(id) {\r\n        return dispatch => {\r\n            dispatch(fetchStart());\r\n            const request = new Request(`${apiBaseUrl}/get-single-tournament/${id}`, {\r\n                method: 'GET',\r\n                headers: new Headers({ 'Content-Type': 'application/json' }),\r\n            });\r\n            return fetch(request).then(handleResponse).then((data) => {\r\n                dispatch(fetchsingleTournamentSuccess(data))\r\n            });\r\n        }\r\n        }\r\n\r\n"]},"metadata":{},"sourceType":"module"}