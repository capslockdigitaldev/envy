{"ast":null,"code":"var _jsxFileName = \"/home/capslock/Downloads/envy/src/components/singleSticket.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport SimpleReactValidator from 'simple-react-validator';\nimport { getSingleSupportTicket } from \"./../store/actions/sticketsActions\";\nimport { FormGroup, FormControl } from 'react-bootstrap';\nimport axios from 'axios';\nimport parseJwt from './../store/helpers/common';\nimport toastr from 'reactjs-toastr';\n\nclass singleSticket extends Component {\n  constructor(props) {\n    super(props);\n\n    this.validatesticketmessageForm = e => {\n      let validate = this.sticketValidator;\n\n      if (validate.allValid()) {} else {\n        validate.showMessages();\n        this.forceUpdate();\n      }\n\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n      e.preventDefault();\n    };\n\n    this.sendMessage = e => {\n      e.preventDefault();\n      let validate = this.sticketValidator;\n\n      if (validate.allValid()) {\n        const _this$state = this.state,\n              ticket_id = _this$state.ticket_id,\n              messages = _this$state.messages,\n              newmessage = _this$state.newmessage,\n              current_id = _this$state.current_id;\n        console.log(messages);\n        var today = new Date();\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n\n        var yyyy = today.getFullYear();\n        today = dd + '-' + mm + '-' + yyyy;\n        const mess = messages;\n        mess.push({\n          'senderid': current_id,\n          'date': today,\n          \"message\": newmessage\n        });\n        let request;\n        let formData = new FormData();\n        formData.append('ticket_id', ticket_id);\n        formData.append('messages', JSON.stringify(mess));\n        request = {\n          method: 'POST',\n          url: `https://xrsports.gg/team/public/user/update-sticket-message`,\n          headers: {\n            'Content-Type': 'application/json',\n            'X-Auth-Token': `${localStorage.getItem('token')}`\n          },\n          data: formData\n        };\n        axios(request).then(data => {\n          if (data.data.ResponseCode === \"1\") {\n            toastr.success(data.data.ResponseText, {\n              displayDuration: 1500\n            });\n            this.props.dispatch(getSingleSupportTicket(ticket_id));\n            document.getElementById('newmessage').value = '';\n          } else {\n            toastr.error(data, {\n              displayDuration: 1500\n            });\n          }\n        });\n      } else {\n        validate.showMessages();\n        this.forceUpdate();\n      }\n    };\n\n    this.sticketValidator = new SimpleReactValidator();\n    this.state = {\n      userData: '',\n      sortOrderBy: 'asc',\n      messages: [],\n      ticket_id: '',\n      newmessage: '',\n      current_id: ''\n    };\n  }\n\n  componentDidMount() {\n    const ticketid = this.props.match.params.id;\n    this.props.dispatch(getSingleSupportTicket(ticketid));\n\n    if (localStorage.getItem('token')) {\n      const currdetails = parseJwt(localStorage.getItem('token'));\n      const currid = currdetails.sub;\n      this.setState({\n        current_id: currid\n      });\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      userData: nextProps.singlesticket,\n      messages: nextProps.singlesticket.messages,\n      ticket_id: nextProps.singlesticket.ticket_id\n    });\n  }\n\n  render() {\n    console.log(this.state);\n    let messages = this.state.messages;\n    let i = 0;\n    return React.createElement(\"div\", {\n      id: \"mainpage\",\n      className: \"main_box p-0 col-md-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"jio\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"supportmessages\",\n      id: \"supportmessages\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, messages.map(post => post.senderid === 'admin' ? React.createElement(\"div\", {\n      className: \"singlelinechat\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"chatleft\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \" \", post.message, \" \"))) : React.createElement(\"div\", {\n      className: \"singlelinechat\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"chatright\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \" \", post.message, \" \")))))), React.createElement(\"div\", {\n      className: \"textsupport\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"sendpicture\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"far fa-images\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    })), React.createElement(\"span\", {\n      className: \"sendtext\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fas fa-font\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    })), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(FormControl, {\n      type: \"text\",\n      id: \"newmessage\",\n      name: \"newmessage\",\n      placeholder: \"type here....\",\n      value: this.state.newmessage,\n      onChange: e => this.validatesticketmessageForm(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }), this.sticketValidator.message('newmessage', this.state.newmessage, 'required')), React.createElement(\"button\", {\n      type: \"submit\",\n      onClick: ev => this.sendMessage(ev),\n      className: \"btn btn-red btn-block btn-lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"SEND\")));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  singlesticket: state.stickets.data\n});\n\nexport default connect(mapStateToProps)(singleSticket);","map":{"version":3,"sources":["/home/capslock/Downloads/envy/src/components/singleSticket.jsx"],"names":["React","Component","connect","SimpleReactValidator","getSingleSupportTicket","FormGroup","FormControl","axios","parseJwt","toastr","singleSticket","constructor","props","validatesticketmessageForm","e","validate","sticketValidator","allValid","showMessages","forceUpdate","setState","target","name","value","preventDefault","sendMessage","state","ticket_id","messages","newmessage","current_id","console","log","today","Date","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","mess","push","request","formData","FormData","append","JSON","stringify","method","url","headers","localStorage","getItem","data","then","ResponseCode","success","ResponseText","displayDuration","dispatch","document","getElementById","error","userData","sortOrderBy","componentDidMount","ticketid","match","params","id","currdetails","currid","sub","componentWillReceiveProps","nextProps","singlesticket","render","i","map","post","senderid","message","ev","mapStateToProps","stickets"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport SimpleReactValidator from 'simple-react-validator';\nimport { getSingleSupportTicket} from \"./../store/actions/sticketsActions\";\nimport { FormGroup, FormControl } from 'react-bootstrap';\nimport axios from 'axios';\nimport parseJwt from './../store/helpers/common';\nimport toastr from 'reactjs-toastr';\n\nclass singleSticket extends Component {\n    constructor(props) {\n        super(props);\n        this.sticketValidator = new SimpleReactValidator();\n\n        this.state = {\n            userData:'',\n            sortOrderBy: 'asc',\n            messages:[],\n            ticket_id:'',\n            newmessage:'',\n            current_id:''\n        }\n    }\n    componentDidMount() {\n        const ticketid = this.props.match.params.id;\n        this.props.dispatch(getSingleSupportTicket(ticketid));\n        if (localStorage.getItem('token')) {\n            const currdetails = parseJwt(localStorage.getItem('token'));\n            const currid = currdetails.sub;\n            this.setState({current_id:currid});\n        }\n    }\n    validatesticketmessageForm = (e) => {\n\t\tlet validate = this.sticketValidator;\n\t\tif (validate.allValid()) {\n\t\n\t\t} else {\n\t\t\tvalidate.showMessages();\n\t\t\tthis.forceUpdate();\n\t\t}\n\t\tthis.setState({ [e.target.name]: e.target.value });\n\t\te.preventDefault();\n\t}\n\n    componentWillReceiveProps(nextProps) {\n        this.setState({\n            userData: nextProps.singlesticket,\n            messages:nextProps.singlesticket.messages,\n            ticket_id:nextProps.singlesticket.ticket_id\n        });\n    }\n    sendMessage = (e) =>{\n\t\te.preventDefault();\n\t\tlet validate = this.sticketValidator;\n\t\tif (validate.allValid()) {\n\t\t\tconst {ticket_id, messages , newmessage,current_id} = this.state;\n                console.log(messages);\n            var today = new Date();\n            var dd = String(today.getDate()).padStart(2, '0');\n            var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n            var yyyy = today.getFullYear();\n            today = dd + '-' + mm + '-' + yyyy;\n                const mess = messages;\n                mess.push({ 'senderid': current_id, 'date': today, \"message\": newmessage });\n\t\t\t\tlet request;\n\t\t\t\tlet formData = new FormData();\n\t\t\t\tformData.append('ticket_id',ticket_id );\n\t\t\t\tformData.append('messages', JSON.stringify(mess));\n\t\t\t\t   request = {\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\turl: `https://xrsports.gg/team/public/user/update-sticket-message`,\n\t\t\t\t\theaders: { 'Content-Type': 'application/json', 'X-Auth-Token': `${localStorage.getItem('token')}` },\n\t\t\t\t\tdata: formData\n\t\t\t\t  };\n\t\t\t\t\n\t\t\t\taxios(request).then((data) => {\n\t\t\t\t  if (data.data.ResponseCode === \"1\") {\n                    toastr.success(data.data.ResponseText, { displayDuration: 1500 });\n                    this.props.dispatch(getSingleSupportTicket(ticket_id));\n                    document.getElementById('newmessage').value = ''\n\t\t\t\t\t }else {\n\t\t\t\t\ttoastr.error(data, { displayDuration: 1500 })\n\t\t\t\t  }\n\t\t\t\t});\n\t\t} else {\n\t\t\tvalidate.showMessages();\n\t\t\tthis.forceUpdate();\n\t\t}\n    }\n    render() {\n        console.log(this.state)\n        let {messages} = this.state;\n        let i =0;\n        \n        return (\n            <div id=\"mainpage\" className=\"main_box p-0 col-md-12\">\n            <div className=\"jio\">\n            <div className=\"supportmessages\" id=\"supportmessages\">\n\n                        {messages.map((post) => (\n                            post.senderid === 'admin'? \n                                <div className=\"singlelinechat\">\n                                <div className=\"chatleft\">\n                                    <h4> {post.message} </h4>\n                                </div> \n                            </div> :\n                            <div className=\"singlelinechat\">\n                                <div className=\"chatright\">\n                                    <h4> {post.message} </h4>\n                                </div> \n                            </div>\n                            \n                        ))}\n\n                        </div>\n                  </div>\n                  <div className=\"textsupport\">\n                       <span className=\"sendpicture\"><i className=\"far fa-images\"></i></span>\n                       <span className=\"sendtext\"><i className=\"fas fa-font\"></i></span>\n            <FormGroup>\n\t\t\t    <FormControl type=\"text\" id=\"newmessage\" name=\"newmessage\" placeholder=\"type here....\" value={this.state.newmessage} onChange={e => this.validatesticketmessageForm(e)} />\n\t\t\t    {this.sticketValidator.message('newmessage', this.state.newmessage, 'required')}\n            </FormGroup>\n            <button type=\"submit\" onClick={(ev) => this.sendMessage(ev)}  className=\"btn btn-red btn-block btn-lg\">SEND</button>\n        </div>\n       </div>\n    );\n    }\n}\n\n\nconst mapStateToProps = (state) => ({\n   singlesticket: state.stickets.data,\n})\nexport default connect(mapStateToProps)(singleSticket);"]},"metadata":{},"sourceType":"module"}