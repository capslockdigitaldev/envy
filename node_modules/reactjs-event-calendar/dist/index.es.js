import React from 'react';

function styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css = "table {\r\n  width: 100%;\r\n  box-sizing: border-box;\r\n  box-shadow: inset 0px 0px 0px 1px rgba(0,0,0,0.1);\r\n  font-family: 'Ubuntu';\r\n  border-spacing: 0;\r\n  background-color: #fff;\r\n}\r\n\r\nth, td {\r\n  border: 1px solid rgba(255,255,255,0.1);\r\n  box-sizing: border-box;\r\n}\r\n\r\nth {\r\n  text-transform: uppercase;\r\n  font-size: 14px;\r\n  font-weight: 700;\r\n  padding: 10px 0;\r\n  color:#000;\r\n  background-color: #fff;\r\n  letter-spacing: 1px;\r\n  border: 1px solid rgba(212, 209, 209, 0.45);\r\n}\r\ntd {\r\n  width: 14.285%;\r\n  transition: all 0.3s;\r\n  font-size: 14px;\r\n  color: #000000;\r\n  font-weight: 400;\r\n  font-size: 14px;\r\n  padding: 1.5% 1.5% 5%;\r\n  vertical-align: initial;\r\n  padding: 1.5% 0;\r\n  height: 75px;\r\n  border: 1px solid rgba(212, 209, 209, 0.45);\r\n}\r\n.Calendar_day__1ND5o:hover {\r\n  border: 1px solid #000;\r\n  cursor: pointer;\r\n}\r\nspan.Calendar_active__1oDfa {\r\n  margin-left: 10%\r\n}\r\ndiv.Calendar_active__1oDfa{\r\n  text-align: right;\r\n  margin-right: 4px;\r\n  font-size: 20px;\r\n}\r\ndiv.Calendar_inactive__1N4GO{\r\n  text-align: right;\r\n  margin-right: 4px;\r\n  font-size: 20px;\r\n  color: #999;\r\n}\r\nspan.Calendar_event__1cQL1 {\r\n  height: 6px;\r\n  display: block;\r\n  margin: 5px 10%;\r\n  background-color: #2196F3;\r\n}\r\nspan.Calendar_event-multiday__3EVbS {\r\n   margin: 5px -2px; border-radius: 0;\r\n  }\r\nspan.Calendar_event-multiday-start__18pmk {\r\n  margin-right: -4px;\r\n}\r\nspan.Calendar_event-multiday-finish__2LCm2 {\r\n  margin-left: -4px; \r\n}\r\nspan.Calendar_event-ghost__3_VD- {\r\n  background-color:transparent;\r\n}\r\n";
styleInject(css);

var css$1 = "";
styleInject(css$1);

function Date$1(props) {

    var style = "event";

    switch (props.event) {
        case 1:
            style += " event event-multiday-start";
            break;
        case 2:
            style += " event event-multiday";
            break;
        case 3:
            style += " event event-multiday-finish";
            break;
        case 4:
            style += " event event-ghost";
            break;
    }
    return React.createElement('span', { className: style });
}

function Date$2(props) {

    var a = props.events;
    var d = null;
    if (a[props.date.year] && a[props.date.year][props.date.month]) {
        d = a[props.date.year][props.date.month][props.date.date];
    }
    var active = props.date.active ? "active" : "inactive";
    return React.createElement(
        'td',
        { 'class': 'day' },
        React.createElement(
            'div',
            { 'class': active },
            props.date.date
        ),
        d && d[1] ? React.createElement(Date$1, { event: d[1] }) : null,
        d && d[2] ? React.createElement(Date$1, { event: d[2] }) : null,
        d && d[3] ? React.createElement(Date$1, { event: d[3] }) : null
    );
}

function Week(props) {
    var dates = [];
    var diff = props.week.end - props.week.start;
    if (props.week.start == 1) {
        for (var i = 0; i < 6 - diff; i++) {
            dates.push("");
        }
    }
    for (var _i = props.week.start; _i <= props.week.end; _i++) {
        dates.push({ active: true, date: _i, month: props.month, year: props.year });
    }
    var dateSize = dates.length;
    for (var _i2 = 1; _i2 < 8 - dateSize; _i2++) {
        var month = props.month;
        var year = props.year;
        if (props.month == 12) {
            month = 1;
            year++;
        }
        dates.push({ active: false, date: _i2, month: month, year: year });
    }
    return React.createElement(
        'tr',
        null,
        dates.map(function (value, index) {
            return React.createElement(Date$2, { date: value, events: props.events });
        })
    );
}

var css$2 = ".WeekHeader_th__3G8Eq {\r\n    flex: 30px 0 0;\r\n} \r\n.WeekHeader_th__3G8Eq { display: flex; }\r\n.WeekHeader_th__3G8Eq>span {\r\n  text-align: right;\r\n}\r\n.WeekHeader_th__3G8Eq>span{\r\n    width: 100%;\r\n    color: #536DFE;\r\n    font-weight: bold;\r\n}";
styleInject(css$2);

var toConsumableArray = function (arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  } else {
    return Array.from(arr);
  }
};

function WeekHeader$1(props) {

    var dates = props.weakHeaders ? props.weakHeaders : ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];

    var rotate = function rotate(arr, count) {
        if (count === 0) return arr;
        return [].concat(toConsumableArray(arr.slice(count, arr.length)), toConsumableArray(arr.slice(0, count)));
    };

    var d = rotate(dates, props.startWeek);

    return React.createElement(
        'tr',
        null,
        d.map(function (value, index) {
            return React.createElement(
                'th',
                { 'class': 'day-name' },
                value
            );
        })
    );
}

function aa() {

  var events = this.props.events;

  var eventSlots = {};
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = events[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var event = _step.value;

      var from = event.from.getDate();
      var to = event.to.getDate();
      var year = event.from.getFullYear();
      var month = event.from.getMonth() + 1;
      var freeSlot = hasFreeSlot(eventSlots, year, month, from);

      if (freeSlot) {
        if (event.from.getFullYear() == event.to.getFullYear() && event.from.getMonth() == event.to.getMonth() && from == to) {
          eventSlots[year][month][from][freeSlot] = 5;
          continue;
        }
        fillSlot(event.from, event.to, month, year, eventSlots, freeSlot);
        // for (let i = from; i <= to; i++) {
        //   if (!eventSlots[year][month][i]) {
        //     eventSlots[year][month][i] = {};
        //   }
        //   if (i == from) {
        //     eventSlots[year][month][i][freeSlot] = 1;
        //   } else if (i == to) {
        //     eventSlots[year][month][i][freeSlot] = 3;
        //   } else {
        //     eventSlots[year][month][i][freeSlot] = 2;
        //   }
        //   if (freeSlot == 2) {
        //     if (!eventSlots[year][month][i][1]) {
        //       eventSlots[year][month][i][1] = 4;
        //     }
        //   }
        //   if (freeSlot == 3) {
        //     if (!eventSlots[year][month][i][1]) {
        //       eventSlots[year][month][i][1] = 4;
        //     }
        //     if (!eventSlots[year][month][i][2]) {
        //       eventSlots[year][month][i][2] = 4;
        //     }
        //   }
        // }

      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return eventSlots;
}

function fillSlot(from, to, currentMonth, currentYear, slots, slotNumber) {
  if (slots[currentYear] == null) slots[currentYear] = {};
  if (slots[currentYear][currentMonth] == null) slots[currentYear][currentMonth] = {};

  var fromMonth = from.getMonth() + 1;
  var toMonth = to.getMonth() + 1;

  var startDate = 0;
  var lastDate = 0;
  if (fromMonth == toMonth) {
    startDate = from.getDate();
    lastDate = to.getDate();
  } else if (fromMonth == currentMonth) {
    startDate = from.getDate();
    lastDate = new Date(currentYear, currentMonth, 0).getDate();
  } else if (toMonth == currentMonth) {
    startDate = 1;
    lastDate = to.getDate();
  } else {
    startDate = 1;
    lastDate = new Date(currentYear, currentMonth, 0).getDate();
  }
  for (var i = startDate; i <= lastDate; i++) {
    if (slots[currentYear][currentMonth][i] == null) slots[currentYear][currentMonth][i] = {};

    if (from.getFullYear() == currentYear && from.getMonth() + 1 == currentMonth && from.getDate() == i) {
      slots[currentYear][currentMonth][i][slotNumber] = 1;
    } else if (to.getFullYear() == currentYear && to.getMonth() + 1 == currentMonth && to.getDate() == i) {
      slots[currentYear][currentMonth][i][slotNumber] = 3;
    } else {
      slots[currentYear][currentMonth][i][slotNumber] = 2;
    }
    if (slotNumber == 2) {
      if (!slots[currentYear][currentMonth][i][1]) {
        slots[currentYear][currentMonth][i][1] = 4;
      }
    }
    if (slotNumber == 3) {
      if (!slots[currentYear][currentMonth][i][1]) {
        slots[currentYear][currentMonth][i][1] = 4;
      }
      if (!slots[currentYear][currentMonth][i][2]) {
        slots[currentYear][currentMonth][i][2] = 4;
      }
    }
  }
  var nextMonth = currentMonth + 1;
  if (nextMonth > 12) {
    nextMonth = 1;
    currentYear++;
  }
  nextMonth = nextMonth > 13 ? 1 : nextMonth;

  if (currentYear <= to.getFullYear() && to.getMonth() + 1 != currentMonth) {
    fillSlot(from, to, nextMonth, currentYear, slots, slotNumber);
  }
}

function hasFreeSlot(eventSlots, year, month, date) {
  if (!eventSlots[year]) {
    eventSlots[year] = {};
  }
  if (!eventSlots[year][month]) {
    eventSlots[year][month] = {};
  }
  if (!eventSlots[year][month][date]) {
    eventSlots[year][month][date] = {};
  }
  var eventSlot = eventSlots[year][month][date];
  // eventSlot = eventSlots[year][month][date];
  // if (!eventSlot) {
  //   eventSlots[year][month][date] = {}
  //   eventSlot = eventSlots[year][month][date];
  // }
  if (!eventSlot[1] || eventSlot[1] == 4) {
    return 1;
  } else if (!eventSlot[2] || eventSlot[2] == 4) {
    return 2;
  } else if (!eventSlot[3]) {
    return 3;
  }
  return 0;
}

function Calendar$1(props) {
  var events = aa();
  var year = props.year;
  var month = props.month;
  var startWeek = props.startWeek;
  month--;
  var firstDateOfMonth = new Date(year, month, 1);
  var weeks = [];
  var lastDate = 0;
  var lastDateOfMonth = new Date(year, month + 1, 0).getDate();
  for (var i = 0; i <= 5; i++) {
    if (i == 0) {
      var startPos = firstDateOfMonth.getDay();
      lastDate = startWeek - startPos;
      lastDate = lastDate < 1 ? lastDate + 7 : lastDate;
      weeks.push({ start: 1, end: lastDate });
    } else {
      var startDate = lastDate + 1;
      lastDate += 7;
      if (lastDate > lastDateOfMonth) {
        lastDate = lastDateOfMonth;
        weeks.push({ start: startDate, end: lastDate });
        break;
      }
      weeks.push({ start: startDate, end: lastDate });
    }
  }
  return React.createElement(
    'table',
    null,
    React.createElement(WeekHeader$1, { startWeek: startWeek, weakHeaders: props.weakHeaders }),
    weeks.map(function (value, index) {
      return React.createElement(Week, { year: year, month: month + 1, week: value, events: events });
    })
  );
}

export default Calendar$1;
//# sourceMappingURL=index.es.js.map
